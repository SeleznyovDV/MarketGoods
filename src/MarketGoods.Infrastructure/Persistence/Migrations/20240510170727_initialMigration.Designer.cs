// <auto-generated />
using System;
using MarketGoods.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketGoods.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240510170727_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoodOrder", b =>
                {
                    b.Property<Guid>("GoodsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("GoodsId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("GoodOrder");
                });

            modelBuilder.Entity("MarketGoods.Domain.Goods.Good", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Goods", (string)null);
                });

            modelBuilder.Entity("MarketGoods.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("MarketGoods.Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("MarketGoods.Domain.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("MarketGoods.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GoodOrder", b =>
                {
                    b.HasOne("MarketGoods.Domain.Goods.Good", null)
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketGoods.Domain.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketGoods.Domain.Goods.Good", b =>
                {
                    b.OwnsOne("MarketGoods.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("GoodId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("numeric")
                                .HasDefaultValue(0m)
                                .HasColumnName("Price");

                            b1.HasKey("GoodId");

                            b1.ToTable("Goods");

                            b1.WithOwner()
                                .HasForeignKey("GoodId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("MarketGoods.Domain.Orders.Order", b =>
                {
                    b.HasOne("MarketGoods.Domain.Payments.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("MarketGoods.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketGoods.Domain.Reviews.Review", b =>
                {
                    b.HasOne("MarketGoods.Domain.Goods.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketGoods.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MarketGoods.Domain.ValueObjects.Raiting", "Rating", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Quality")
                                .HasColumnType("integer")
                                .HasColumnName("QualityRaiting");

                            b1.Property<int>("Satisfaction")
                                .HasColumnType("integer")
                                .HasColumnName("SatisfactionRaiting");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Reviews");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("Good");

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketGoods.Domain.Users.User", b =>
                {
                    b.OwnsOne("MarketGoods.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Entrance")
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");

                            b1.Property<string>("Flat")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<int?>("Floor")
                                .HasMaxLength(4)
                                .HasColumnType("integer");

                            b1.Property<string>("HouseNumber")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("IntercomCode")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("Street")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("MarketGoods.Domain.ValueObjects.City", "City", b2 =>
                                {
                                    b2.Property<Guid>("AddressUserId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("City");

                                    b2.HasKey("AddressUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressUserId");

                                    b2.OwnsOne("MarketGoods.Domain.ValueObjects.Region", "Region", b3 =>
                                        {
                                            b3.Property<Guid>("CityAddressUserId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Code")
                                                .HasMaxLength(2)
                                                .HasColumnType("character varying(2)")
                                                .HasColumnName("RegionCode");

                                            b3.Property<string>("Name")
                                                .HasMaxLength(100)
                                                .HasColumnType("character varying(100)")
                                                .HasColumnName("Region");

                                            b3.HasKey("CityAddressUserId");

                                            b3.ToTable("Users");

                                            b3.WithOwner()
                                                .HasForeignKey("CityAddressUserId");
                                        });

                                    b2.Navigation("Region")
                                        .IsRequired();
                                });

                            b1.Navigation("City")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
